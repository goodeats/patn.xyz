// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  // TODO: change this to images in 2nd migration after Image is added
  userImage  Image?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]
  // TODO: change this to images in 2nd migration after Image is added
  noteImages Image[]

  // Polymorphic Relations
  page   Page?   @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pageId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String?
  category Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String?
  tag   Tag?    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId String?

  // non-unique foreign key
  @@index([ownerId])
  @@index([pageId])
  @@index([postId])
  @@index([categoryId])
  @@index([tagId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
  @@index([pageId, updatedAt])
  @@index([postId, updatedAt])
  @@index([categoryId, updatedAt])
  @@index([tagId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Image {
  id          String  @id @default(cuid())
  name        String?
  description String?
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Polymorphic Relations
  note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @unique
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String?

  // non-unique foreign key
  @@index([noteId])
  @@index([userId])
  @@index([postId])
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

// This is how I will organize the content of my site
// main (landing page), about, projects, blog, contact, references, etc
model Page {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")
  slug        String @unique
  order       Int    @default(0)
  published   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notes Note[]
  posts Post[]
}

model Post {
  id          String @id @default(cuid())
  title       String
  description String
  slug        String @unique
  order       Int    @default(0)
  published   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pageId String

  images Image[]
  links Link[]
  notes Note[]
  categories PostCategory[]
  tags PostTag[]

  // non-unique foreign key
  @@index([pageId])
  // This helps our order by in the search a LOT
  @@index([pageId, updatedAt])
}

// link could be to github project, live site, or external blog/article
// could also be tweeted, or shared on linkedin
model Link {
  id          String @id @default(cuid())
  title       String
  description String
  url         String
  urlDomain   String
  order       Int    @default(0)
  published   Boolean @default(true)
  type        String @default("link")
  external    Boolean @default(true) // if false, it's a link to somewhere else on my site

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  // non-unique foreign key
  @@index([postId])
  // This helps our order by in the search a LOT
  @@index([postId, updatedAt])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  description String?
  slug      String   @unique
  published Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags      Tag[]
  posts     PostCategory[]
  notes     Note[]
}


model Tag {
  id        String   @id @default(uuid())
  name      String
  description String?
  slug      String   @unique
  published Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category  Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  posts     PostTag[]
  notes     Note[]

  // non-unique foreign key
  @@index([categoryId])
}

model PostCategory {
  id        String   @id @default(uuid())
  order     Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  // unique post and category pair
  @@unique([postId, categoryId])
  // non-unique foreign keys
  @@index([postId])
  @@index([categoryId])
}

model PostTag {
  id        String   @id @default(uuid())
  order     Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId String

  // unique post and tag pair
  @@unique([postId, tagId])
  // non-unique foreign keys
  @@index([postId])
  @@index([tagId])
}
